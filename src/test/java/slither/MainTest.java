package slither;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.jupiter.api.Test;

import com.slither.cpooprojet.Model.*;
import com.slither.cpooprojet.Model.Snake.SnakeBuilder;
import com.slither.cpooprojet.View.*;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Optional;

public class MainTest {

    @Test
    void testSomeFeature() {
        assertTrue(true, "This test should be run");
    }

    @Test
    void testSomeOtherFeature() {
        assertFalse(false, "This test should fail");
    }

    @Test
    void testAddNewPart() {
        Snake snake = new SnakeBuilder().setVitesse(2).build();
        int tailleInitiale = snake.getSegments().size();
        snake.addNewPart();
        snake.addNewPart();
        snake.addNewPart();
        snake.addNewPart();

        assertEquals(tailleInitiale + 4, snake.getSegments().size(),
                "L'ajout de nouvelles parties au serpent a échoué");
    }

    @Test
    void testAcceleration() {
        Snake snake = new SnakeBuilder().setVitesse(2).build();
        snake.acceleration();
        assertTrue(snake.isAccelerated(), "Le serpent n'a pas accéléré correctement");
        assertEquals(12, snake.getVitesse(), "La vitesse du serpent après accélération est incorrecte");
    }

    @Test
    void testDeceleration() {
        Snake snake = new SnakeBuilder().setVitesse(2).build();
        snake.acceleration();
        snake.deceleration();
        assertFalse(snake.isAccelerated(), "Le serpent n'a pas ralenti correctement");
        assertEquals(2, snake.getVitesse(), "La vitesse du serpent après décélération est incorrecte");
    }

    @Test
    void testSet() {
        Snake snake = new SnakeBuilder().setVitesse(2).build();
        Snake snake2 = new SnakeBuilder().setVitesse(3).build();

        snake.set(snake2);
        assertEquals(3, snake.getVitesse(), "La modification des attributs du serpent a échoué");
    }

    @Test
    void testCollision() {
        Snake snake = new SnakeBuilder().build();
        Snake snake2 = new SnakeBuilder().build();
        // Configurer la position pour simuler une collision
        snake2.getHead().setX(snake.getHead().getX());
        snake2.getHead().setY(snake.getHead().getY());

        Modele modele = new Modele(snake);
        modele.addSnake(snake);
        modele.addSnake(snake2);

        Optional<Snake> collidedSnake = modele.checkCollision(snake2);
        assertTrue(collidedSnake.isPresent(), "La détection de collision a échoué");
        assertEquals(collidedSnake.get(), snake, "La collision détectée n'est pas avec le bon serpent");
    }

    @Test
    void testSnakeIntersectsFood() {
        Snake snake = new SnakeBuilder().setVitesse(2).build();
        int tailleInitiale = snake.getSegments().size();

        Food food = new Food(snake.getHead().getX(), snake.getHead().getY());
        Modele modele = new Modele(snake);
        modele.getFoodList().add(food);

        modele.update_food_tab_food();

        assertEquals(tailleInitiale + 1, snake.getSegments().size(),
                "Le serpent n'a pas intersecté correctement avec la nourriture");
    }

    @Test
    void testAddSnake() {
        Snake snake = new SnakeBuilder().build();
        Modele modele = new Modele(snake);
        assertTrue(modele.getSnakes().containsValue(snake), "L'ajout d'un serpent a échoué");
    }

    @Test
    void testCollisionDetection() {
        Snake snake1 = new SnakeBuilder().build();
        Modele modele = new Modele(snake1);
        Snake snake2 = new SnakeBuilder().build();
        // Configurer les positions pour simuler une collision
        Optional<Snake> collidedSnake = modele.checkCollision(snake1);
        assertEquals(collidedSnake.orElse(null), snake2, "La détection de collision a échoué");
    }

}
